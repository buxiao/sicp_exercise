(define (fast-prime? n times)
	(define (square a) (* a a))
	(define (even? a) (= 0 (remainder a 2)))
	(define (expmod base exp m)
		(cond ((= exp 0) 1)
					((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
					(else (remainder (* base (expmod base (- exp 1) m)) m))))
	(define (try-it a) (= (expmod a n n) a))
	(define (fermat-test n) (try-it (+ 1 (random (- n 1)))))
  (cond ((= times 0) true)
  			((fermat-test n) (fast-prime? n (- times 1)))
  			(else false))) 

(define (timed-prime-test n)
	(define (report-prime n elapsed-time)
		(newline)
		(display n)
		(display "***:")
		(display elapsed-time))
	(define (start-prime-test start-time)
		(if (fast-prime? n 10000) (report-prime n (- (runtime) start-time))))
	(start-prime-test (runtime)))

(timed-prime-test 561)
(timed-prime-test 2821)
(timed-prime-test 6601)
