(define (smallest-divisor n)
	(define (square a) (* a a))
	(define (divides? a b) (= (remainder b a) 0))
	(define (find-divisor test-divisor)
		(cond ((> (square test-divisor) n) n)
					((divides? test-divisor n) test-divisor)
					(else (find-divisor (+ test-divisor 1)))))
	(find-divisor 2))
(define (prime? n) (= (smallest-divisor n) n))

(define (timed-prime-test n)
	(define (report-prime n elapsed-time)
		(newline)
		(display n)
		(display "***:")
		(display elapsed-time))
	(define (start-prime-test n start-time)
		(if (prime? n) (report-prime n (- (runtime) start-time))))
	(start-prime-test n (runtime)))

(define (search-for-primes start end)
	(timed-prime-test start)
	(if (< start end) (search-for-primes (+ start 1) end)))

(timed-prime-test 100000007)