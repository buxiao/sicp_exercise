(define (sd-fast n)
	(define (square a) (* a a))
	(define (divides? a b) (= (remainder b a) 0))
	(define (next a) (if (= a 2) 3 (+ a 2)))
	(define (find-divisor test-divisor)
		(cond ((> (square test-divisor) n) n)
					((divides? test-divisor n) test-divisor)
					(else (find-divisor (next test-divisor)))))
	(define (sd-fast-start s)
		 (newline)
		 (display (find-divisor 2))
	   (display ":")
	   (display (- (runtime) s)))
	(sd-fast-start (runtime)))

(define (sd n)
	(define (square a) (* a a))
	(define (divides? a b) (= (remainder b a) 0))
	(define (find-divisor test-divisor)
		(cond ((> (square test-divisor) n) n)
					((divides? test-divisor n) test-divisor)
					(else (find-divisor (+ test-divisor 1)))))
	(define (sd-start s)
		 (newline)
		 (display (find-divisor 2))
	   (display ":")
	   (display (- (runtime) s)))
	(sd-start (runtime)))

(sd 10000007)
(sd-fast 10000007)